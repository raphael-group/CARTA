# TLS snakefile
configfile: "config.yaml"

state_list = ['Endoderm', 'Endothelial', 'NMPs', 'NeuralTube', 'PCGLC', 'Somite']

tree_index_list = list(range(0, 5))
percent_list = [i * 10 for i in range(2, 10)]

one_state_tree_index_list = list(range(0, 5))
one_state_percent_list = [20, 40, 60, 80]

rule all:
    input:
        expand('results/{structure}/{weights}_progenitors_{k}.txt', structure=config['structure'], weights=config['weights'], k=config['k']),
        expand("results/TLS_bootstrap/random_undersample/results/{percent}_percent/TLS_{tree_index}_dummy.txt", percent=percent_list, tree_index=tree_index_list),
        expand("results/TLS_bootstrap/subsample_one_state/results/{percent}/{state}/TLS_{tree_index}_dummy.txt", percent=one_state_percent_list, state=state_list, tree_index=one_state_tree_index_list),

def get_structure_flag(wc):
    structure = wc.structure
    if structure == 'tree':
        return "--enforce_tree"
    else:
        return ""

rule run_carta:
    input:
        location_file="TLS_locations.txt",
        state_file="TLS_states.txt",
    output:
        prog_file="results/{structure}/{weights}_progenitors_{k}.txt",
    params:
        prefix="results/{structure}/{weights}",
        structure_flag=get_structure_flag,
    log:
        std="results/{structure}/{weights}_{k}.log",
        err="results/{structure}/{weights}_{k}.err.log",
    shell:
        "python ../../carta/carta.py --prefix {params.prefix} -ks {wildcards.k} "
        "--file_locations {input.location_file} --states_file {input.state_file} "
        "--normalize_method {wildcards.weights} --time_limit_sec 1000000000000 "
        "{params.structure_flag} > {log.std} 2> {log.err} "

rule random_undersample:
    input:
        tree_file="results/TLS_bootstrap/random_undersample/trees/{percent}_percent/tree_{tree_index}.nwk",
    output:
        out="results/TLS_bootstrap/random_undersample/results/{percent}_percent/TLS_{tree_index}_dummy.txt",
    params:
        out_folder="results/TLS_bootstrap/random_undersample/results/{percent}_percent/TLS_{tree_index}",
        sim_folder="results/TLS_bootstrap/random_undersample/trees/{percent}_percent/meta_{tree_index}.txt",
    log:
        std="results/TLS_bootstrap/random_undersample/results/{percent}_percent/logs/log_{tree_index}.std",
        err="results/TLS_bootstrap/random_undersample/results/{percent}_percent/logs/log_{tree_index}.err",
    shell:
        "python ../../scripts/run_fastCARTA.py -t {input.tree_file} --output {params.out_folder} --label {params.sim_folder} -ks 1 2 3 4 5 6 7 8 9 10 --no_enforce_tree > {log.std} 2> {log.err}"

rule subsample_one_state:
    input:
        tree_file="results/TLS_bootstrap/subsample_one_state/trees/{percent}/{state}/tree_{tree_index}.nwk",
    output:
        out="results/TLS_bootstrap/subsample_one_state/results/{percent}/{state}/TLS_{tree_index}_dummy.txt",
    params:
        out_folder="results/TLS_bootstrap/subsample_one_state/results/{percent}/{state}/TLS_{tree_index}",
        sim_folder="results/TLS_bootstrap/subsample_one_state/trees/{percent}/{state}/meta_{tree_index}.txt",
    log:
        std="results/TLS_bootstrap/subsample_one_state/results/{percent}/{state}/logs/log_{tree_index}.std",
        err="results/TLS_bootstrap/subsample_one_state/results/{percent}/{state}/logs/log_{tree_index}.err",
    shell:
        "python ../../scripts/run_fastCARTA.py -t {input.tree_file} --output {params.out_folder} --label {params.sim_folder} -ks 7 --no_enforce_tree > {log.std} 2> {log.err}"