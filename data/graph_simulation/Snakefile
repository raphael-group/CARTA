# gastruloid snakefile
configfile: "config.yaml"

import itertools

nmaps = 5
ntrees = 5
index_list = [ i for i in range(nmaps)]
seed_list = [i for i in range(ntrees)]

rule all:
    input:
        expand("ground_truth/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_tree.txt", ntypes=config['ntypes'], k=config['k'], fatemaprep=index_list, ncells=config['ncells'], subsample_prop=config['subsample_prop'], treerep=seed_list),
        expand("qfm/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_IceFaseGraph.nwk", ntypes=config['ntypes'], k=config['k'], fatemaprep=index_list, ncells=config['ncells'], subsample_prop=config['subsample_prop'], treerep=seed_list),
        expand("evo_time/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_EvoCGraph.nwk", ntypes=config['ntypes'], k=config['k'], fatemaprep=index_list, ncells=config['ncells'], subsample_prop=config['subsample_prop'], treerep=seed_list),
        expand("ilp/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_progenitors.txt", ntypes=config['ntypes'], k=config['k'], fatemaprep=index_list, ncells=config['ncells'], subsample_prop=config['subsample_prop'], treerep=seed_list),

def get_k(wc):
    return wc.k

def get_ncells(wc):
    return wc.ncells

def get_sprop(wc):
    return int(wc.subsample_prop)/100

def get_seed(wc):
    return wc.treerep

rule run:
    input:
        graph_file="fate_maps/{ntypes}_{k}_{fatemaprep}_fateMapGraph.txt",
    output:
        prog_file="ground_truth/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_tree.txt",
    params:
        location_file="location_files/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}",
        prefix="ground_truth/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}",
        ncells=get_ncells,
        subsample_prop=get_sprop,
        seed=get_seed,
    log:
        std="ground_truth/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}.log",
        err="ground_truth/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}.err",
    shell:
        "python ../../src/cell_fate_mapping_simulate_tree_from_graph_fate_map.py --prefix {params.prefix} --location_file_prefix {params.location_file} "
        "--graph_file_location {input.graph_file} --num_sampled_per_cell_type {params.ncells} "
        "--subsample_rate {params.subsample_prop} --seed {params.seed}"
        " > {log.std} 2> {log.err}"

rule ilp:
    input:
        location_file="location_files/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_locations.txt",
        state_file="sim_states_{ntypes}.txt",
    output:
        prog_file="ilp/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_progenitors.txt",
    params:
        prefix="ilp/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}",
        k=get_k,
    log:
        std="ilp/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_ilp.log",
        err="ilp/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_ilp.err.log",
    benchmark: "ilp/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_ilp.benchmark",
    shell:
        "python ../../src/cell_fate_mapping_run_ilp.py --prefix {params.prefix} -k {params.k} "
        "--file_locations {input.location_file} --states_file {input.state_file} "
        "--normalize_method no_normalization "
        "> {log.std} 2> {log.err} "

rule qfm:
    input:
        location_file="location_files/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_locations.txt",
    output:
        prog_file="qfm/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_IceFaseGraph.nwk",
    params:
        prefix="qfm/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}",
    log:
        std="qfm/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_qfm.log",
        err="qfm/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_qfm.err.log",
    benchmark: "qfm/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_qfm.benchmark",
    shell:
        "Rscript ../../src/run_ice_fase.R --prefix {params.prefix} "
        "--file_locations {input.location_file} "
        "> {log.std} 2> {log.err} "
        
rule evo:
    input:
        location_file="location_files/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_locations.txt",
        state_file="sim_states_{ntypes}.txt",
    output:
        prog_file="evo_time/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_EvoCGraph.nwk",
    params:
        prefix="evo_time/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}",
    log:
        std="evo_time/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_evo.log",
        err="evo_time/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_evo.err.log",
    benchmark: "evo_time/{ntypes}_{k}_{fatemaprep}_{ncells}_{subsample_prop}_{treerep}_evo.benchmark",
    shell:
        "python ../../src/cell_fate_mapping_run_evo_coupling.py --prefix {params.prefix} "
        "--file_locations {input.location_file} --states_file {input.state_file} --use_branch_lengths"
        "> {log.std} 2> {log.err} "
